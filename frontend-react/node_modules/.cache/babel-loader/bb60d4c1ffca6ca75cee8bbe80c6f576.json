{"ast":null,"code":"import _slicedToArray from \"/home/dan/FACULTA/DS-lab/Project/energy-management-system/frontend-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/dan/FACULTA/DS-lab/Project/energy-management-system/frontend-react/src/person/person-container.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, CardHeader, Col, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport PersonForm from \"./components/person-form\";\nimport * as API_USERS from \"./api/person-api\";\nimport PersonTable from \"./components/person-table\";\n\nfunction PersonContainer(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSelected = _useState2[0],\n      setIsSelected = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tableData = _useState4[0],\n      setTableData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoaded = _useState6[0],\n      setIsLoaded = _useState6[1]; // Store error status and message in the same object because we don't want \n  // to render the component twice (using setError and setErrorStatus)\n  // This approach can be used for linked state variables.\n\n\n  var _useState7 = useState({\n    status: 0,\n    errorMessage: null\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      error = _useState8[0],\n      setError = _useState8[1]; // componentDidMount\n\n\n  useEffect(function () {\n    fetchPersons();\n  }, []);\n\n  function fetchPersons() {\n    return API_USERS.getPersons(function (result, status, err) {\n      if (result !== null && status === 200) {\n        setTableData(function (tableData) {\n          return result;\n        });\n        setIsLoaded(function (isLoaded) {\n          return true;\n        });\n      } else {\n        setError(function (error) {\n          return {\n            status: status,\n            errorMessage: err\n          };\n        });\n      }\n    });\n  }\n\n  function toggleForm() {\n    setIsSelected(function (isSelected) {\n      return !isSelected;\n    });\n  }\n\n  function reload() {\n    setIsLoaded(function (isLoaded) {\n      return false;\n    });\n    toggleForm();\n    fetchPersons();\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \" Person Management \")), React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: {\n      size: '8',\n      offset: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggleForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Add Person \"))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: {\n      size: '8',\n      offset: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, isLoaded && React.createElement(PersonTable, {\n    tableData: tableData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), error.status > 0 && React.createElement(APIResponseErrorMessage, {\n    errorStatus: error.status,\n    error: error.errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })))), React.createElement(Modal, {\n    isOpen: isSelected,\n    toggle: toggleForm,\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggleForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \" Add Person: \"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(PersonForm, {\n    reloadHandler: reload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))));\n}\n\nexport default PersonContainer;","map":{"version":3,"sources":["/home/dan/FACULTA/DS-lab/Project/energy-management-system/frontend-react/src/person/person-container.js"],"names":["React","useState","useEffect","Button","Card","CardHeader","Col","Modal","ModalBody","ModalHeader","Row","APIResponseErrorMessage","PersonForm","API_USERS","PersonTable","PersonContainer","props","isSelected","setIsSelected","tableData","setTableData","isLoaded","setIsLoaded","status","errorMessage","error","setError","fetchPersons","getPersons","result","err","toggleForm","reload","size","offset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Card, CardHeader, Col, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\n\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport PersonForm from \"./components/person-form\";\nimport * as API_USERS from \"./api/person-api\";\nimport PersonTable from \"./components/person-table\";\n\nfunction PersonContainer(props) {\n    const [isSelected, setIsSelected] = useState(false);\n    const [tableData, setTableData] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    // Store error status and message in the same object because we don't want \n    // to render the component twice (using setError and setErrorStatus)\n    // This approach can be used for linked state variables.\n    const [error, setError] = useState({ status: 0, errorMessage: null });\n\n    // componentDidMount\n    useEffect(() => {\n        fetchPersons();\n    }, []);\n\n    function fetchPersons() {\n        return API_USERS.getPersons((result, status, err) => {\n            if (result !== null && status === 200) {\n                setTableData((tableData) => (result));\n                setIsLoaded((isLoaded) => (true));\n            } else {\n                setError((error) => ({ status: status, errorMessage: err }));\n            }\n        });\n    }\n\n    function toggleForm() {\n        setIsSelected((isSelected) => (!isSelected));\n    }\n\n    function reload() {\n        setIsLoaded((isLoaded) => (false));\n\n        toggleForm();\n        fetchPersons();\n    }\n\n    return (\n        <div>\n            <CardHeader>\n                <strong> Person Management </strong>\n            </CardHeader>\n            <Card>\n                <br />\n                <Row>\n                    <Col sm={{ size: '8', offset: 1 }}>\n                        <Button color=\"primary\" onClick={toggleForm}>Add Person </Button>\n                    </Col>\n                </Row>\n                <br />\n                <Row>\n                    <Col sm={{ size: '8', offset: 1 }}>\n                        {isLoaded && <PersonTable tableData={tableData} />}\n                        {error.status > 0 &&\n                            <APIResponseErrorMessage\n                                errorStatus={error.status}\n                                error={error.errorMessage}\n                            />}\n                    </Col>\n                </Row>\n            </Card>\n\n            <Modal isOpen={isSelected} toggle={toggleForm} size=\"lg\">\n                <ModalHeader toggle={toggleForm}> Add Person: </ModalHeader>\n                <ModalBody>\n                    <PersonForm reloadHandler={reload} />\n                </ModalBody>\n            </Modal>\n\n        </div>\n    );\n\n}\n\nexport default PersonContainer;\n"]},"metadata":{},"sourceType":"module"}