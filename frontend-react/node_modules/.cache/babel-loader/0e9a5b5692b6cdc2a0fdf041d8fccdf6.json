{"ast":null,"code":"function Validate(value, rules) {\n  function minLengthValidator(value, minLength) {\n    return value.length >= minLength;\n  }\n\n  function requiredValidator(value) {\n    return value.trim() !== '';\n  }\n\n  function emailValidator(value) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(value).toLowerCase());\n  }\n\n  var isValid = true;\n\n  for (var rule in rules) {\n    switch (rule) {\n      case 'minLength':\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case 'isRequired':\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      case 'emailValidator':\n        isValid = isValid && emailValidator(value);\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n}\n\n;\nexport default Validate;","map":{"version":3,"sources":["/home/dan/FACULTA/DS-lab/react-demo/src/person/components/validators/person-validators.js"],"names":["Validate","value","rules","minLengthValidator","minLength","length","requiredValidator","trim","emailValidator","re","test","String","toLowerCase","isValid","rule"],"mappings":"AAAA,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;AAE5B,WAASC,kBAAT,CAA4BF,KAA5B,EAAmCG,SAAnC,EAA8C;AAC1C,WAAOH,KAAK,CAACI,MAAN,IAAgBD,SAAvB;AACH;;AAED,WAASE,iBAAT,CAA2BL,KAA3B,EAAkC;AAC9B,WAAOA,KAAK,CAACM,IAAN,OAAiB,EAAxB;AACH;;AAED,WAASC,cAAT,CAAwBP,KAAxB,EAA+B;AAC3B,QAAMQ,EAAE,GAAG,qJAAX;AACA,WAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACV,KAAD,CAAN,CAAcW,WAAd,EAAR,CAAP;AACH;;AAED,MAAIC,OAAO,GAAG,IAAd;;AAEA,OAAK,IAAIC,IAAT,IAAiBZ,KAAjB,EAAwB;AAEpB,YAAQY,IAAR;AACI,WAAK,WAAL;AAAkBD,QAAAA,OAAO,GAAGA,OAAO,IAAIV,kBAAkB,CAACF,KAAD,EAAQC,KAAK,CAACY,IAAD,CAAb,CAAvC;AACd;;AAEJ,WAAK,YAAL;AAAmBD,QAAAA,OAAO,GAAGA,OAAO,IAAIP,iBAAiB,CAACL,KAAD,CAAtC;AACf;;AAEJ,WAAK,gBAAL;AAAuBY,QAAAA,OAAO,GAAGA,OAAO,IAAIL,cAAc,CAACP,KAAD,CAAnC;AACnB;;AAEJ;AAASY,QAAAA,OAAO,GAAG,IAAV;AAVb;AAaH;;AAED,SAAOA,OAAP;AACH;;AAAA;AAED,eAAeb,QAAf","sourcesContent":["function Validate(value, rules) {\n\n    function minLengthValidator(value, minLength) {\n        return value.length >= minLength;\n    }\n\n    function requiredValidator(value) {\n        return value.trim() !== '';\n    }\n\n    function emailValidator(value) {\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(String(value).toLowerCase());\n    }\n\n    let isValid = true;\n\n    for (let rule in rules) {\n\n        switch (rule) {\n            case 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]);\n                break;\n\n            case 'isRequired': isValid = isValid && requiredValidator(value);\n                break;\n\n            case 'emailValidator': isValid = isValid && emailValidator(value);\n                break;\n\n            default: isValid = true;\n        }\n\n    }\n\n    return isValid;\n};\n\nexport default Validate;\n"]},"metadata":{},"sourceType":"module"}